-- Data Cleaning

-- https://www.kaggle.com/datasets/swaptr/layoffs-2022




select * from layoffs;


-- first thing we want to do is create a staging table. This is the one we will work in and clean the data. We want a table with the raw data in case something happens

create table layoffs_staging
like layoffs;

INSERT INTO layoffs_staging
select * from layoffs;

select * from layoffs_staging;


-- now when we are data cleaning we usually follow a few steps
-- 1. Check for duplicate and Remove duplicate
-- 2. standarize data and fix errors
-- 3. look at null value or blank values
-- 4. remove any columns and rows that are not necessary



-- 1. Remove Duplicate

-- first let's check for duplicate
	
select *,
row_number () OVER (partition by company, industry, percentage_laid_off, 'date') as row_num
 from layoffs_staging;



 with duplicate_cte as
 (
 select *,
row_number () OVER (partition by company, location, total_laid_off, industry, percentage_laid_off, 'date' , stage, country, funds_raised) as row_num
 from layoffs_staging
 )
 
 select * from duplicate_cte
 where row_num > 1;
 
 select * from layoffs_staging
 where company = "oda";
 
 select *,
row_number () OVER (partition by company, industry, percentage_laid_off, 'date') as row_num
 from layoffs_staging;
 
 with duplicate_cte as
 (
 select *,
row_number () OVER (partition by company, location, total_laid_off, industry, percentage_laid_off, 'date' , stage, country, funds_raised) as row_num
 from layoffs_staging
 )
select * from duplicate_cte
 where row_num > 1;
 

-- one solution, which I think is a good one. Is to create a new column and add those row numbers in. Then delete where row numbers are over 2, then delete that column so let's do it!!

CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` text,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised` double DEFAULT NULL,
  `row_num` int
) 

select * from layoffs_staging2;

-- inserting the values

insert into layoffs_staging2
 select *,
row_number () OVER (partition by company, location, total_laid_off, industry, percentage_laid_off,
 'date' , stage, country, funds_raised) as row_num
 from layoffs_staging;


-- checking the row_num where row_num is more than one 
select * from layoffs_staging2 
where row_num > 1;


-- now that we have this we can delete rows where row_num is greater than 1

Delete from layoffs_staging2 
where row_num > 1;

select * from layoffs_staging2;



-- standardizing data ( finding issue in the data and fixing the data)
select * from layoffs_staging2;


SELECT DISTINCT industry
FROM layoffs_staging2
ORDER BY industry;


-- if we look at industry it looks like we have some null and empty rows, let's take a look at these

SELECT *
FROM layoffs_staging2
WHERE industry IS NULL 
OR industry = ''
ORDER BY industry;

 -- Remove the space
select company, trim(company)
from layoffs_staging2;

update layoffs
set company = trim(company);

select *
from layoffs_staging2;

-- write a query that if there is another row with the same company name, it will update it to the non-null industry values
-- makes it easy so if there were thousands we wouldn't have to manually check them all

UPDATE layoffs_staging2
SET industry = NULL
WHERE industry = '';


-- now if we check those are all null




-- 3 Null/ blank values

-- the null values in total_laid_off, percentage_laid_off, and funds_raised all look normal. I don't think I want to change that
-- I like having them null because it makes it easier for calculations during the EDA phase
-- so there isn't anything I want to change with the null values

-- 4. remove any columns and rows we need to

SELECT *
FROM layoffs_staging2
WHERE total_laid_off IS NULL;



select *
from layoffs_staging2
where total_laid_off is null
and percentage_laid_off is null;


-- Delete Useless data we can't really use

DELETE FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

SELECT * 
FROM world_layoffs.layoffs_staging2;

ALTER TABLE layoffs_staging2
DROP COLUMN row_num;


SELECT * 
FROM world_layoffs.layoffs_staging2;

