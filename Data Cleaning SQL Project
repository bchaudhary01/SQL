-- Data Cleaning

-- https://www.kaggle.com/datasets/swaptr/layoffs-2022




select * from layoffs;


-- first thing we want to do is create a staging table. This is the one we will work in and clean the data. We want a table with the raw data in case something happens

create table layoffs_staging
like layoffs;

INSERT INTO layoffs_staging
select * from layoffs;

select * from layoffs_staging;


-- now when we are data cleaning we usually follow a few steps
-- 1. Check for duplicate and Remove duplicate
-- 2. standarize data and fix errors
-- 3. look at null value or blank values
-- 4. remove any columns and rows that are not necessary



-- 1. Remove Duplicate

-- first let's check for duplicate
	
select *,
row_number () OVER (partition by company, industry, percentage_laid_off, 'date') as row_num
 from layoffs_staging;



 with duplicate_cte as
 (
 select *,
row_number () OVER (partition by company, location, total_laid_off, industry, percentage_laid_off, 'date' , stage, country, funds_raised) as row_num
 from layoffs_staging
 )
 
 select * from duplicate_cte
 where row_num > 1;
 
 select * from layoffs_staging
 where company = "oda";
 
 select *,
row_number () OVER (partition by company, industry, percentage_laid_off, 'date') as row_num
 from layoffs_staging;
 
 with duplicate_cte as
 (
 select *,
row_number () OVER (partition by company, location, total_laid_off, industry, percentage_laid_off, 'date' , stage, country, funds_raised) as row_num
 from layoffs_staging
 )
 delete from duplicate_cte
 where row_num > 1;
 






CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` text,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised` double DEFAULT NULL,
  `row_num` int
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

select * from layoffs_staging2;


insert into layoffs_staging2
 select *,
row_number () OVER (partition by company, location, total_laid_off, industry, percentage_laid_off,
 'date' , stage, country, funds_raised) as row_num
 from layoffs_staging;

select * from layoffs_staging2 
where row_num > 1;

Delete from layoffs_staging2 
where row_num > 1;

select * from layoffs_staging2;

-- standardizing data ( finding issue in the data and fixing the data)

select company, trim(company)
from layoffs_staging2;

update layoffs
set company = trim(company);

select *
from layoffs_staging2;

-- 3 Null/ blank values

select *
from layoffs_staging2
where total_laid_off = ''
and percentage_laid_off = '';

select *
from layoffs_staging2
where company = 'Airbnb';
